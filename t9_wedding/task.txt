67d463933ce234285138f7c4

67d6eece7dd8b3141a10c9fd


Me encuentro planeando mi matrimonio con mi polola y para ello estoy programando una página web con React, JavaScript y CSS. Tengo una primera iteración que tiene un panel de control donde los invitados se categorizan de acuerdo con el estado de la invitación y también se muestra una tabla con todas las invitaciones, que permite ver los nombres, cantidad de invitados, mesa asignada, estado, operaciones (enviar invitación, editar información y borrar invitación) y el número telefónico.

Quiero agregar una funcionalidad que me permita agregar nuevos invitados a partir de una ventana modal con un formulario, se debe hacer las mismas validaciones que se hacen en la edición de los datos para el nombre y los invitados, los otros campos pueden estar vacíos, el estado incial debe ser pendiente. También agrega un filtro en la columna Nombre que busque el texto ingresado en las invitaciones, y otros en las columnas Mesa, Estado e Invitación enviada, cada filtro como selector. La tabla filtrada debe mostrar sólo los valores filtrados y se deben poder restablecer todos los filtros. Modifica el código agregando las funcionalidades pedidas sin agregar comentarios, devuélveme sólo los archivos modificados completos.

`App.jsx`
```javascript
import React, { useState, useEffect } from "react";
import "./App.css";

function App() {
  const [invitations, setInvitations] = useState([]);
  const [editingInvitationId, setEditingInvitationId] = useState(null);
  const [editedInvitation, setEditedInvitation] = useState({});

  useEffect(() => {
    setInvitations([
      {
        id: 1,
        name: "Juan Perez",
        guests: 2,
        table: "1A",
        status: "confirmado",
        invitationSent: false,
        phone: "555-1234",
      },
      {
        id: 2,
        name: "Maria Lopez",
        guests: 1,
        table: "1B",
        status: "pendiente",
        invitationSent: false,
        phone: "555-5678",
      },
      {
        id: 3,
        name: "Carlos Ramirez",
        guests: 3,
        table: "2A",
        status: "rechazado",
        invitationSent: false,
        phone: "555-8765",
      },
      {
        id: 4,
        name: "Ana Torres",
        guests: 2,
        table: "2B",
        status: "confirmado",
        invitationSent: false,
        phone: "555-4321",
      },
    ]);
  }, []);

  const sendInvitation = (phone) => {
    setInvitations((prev) =>
      prev.map((inv) =>
        inv.phone === phone ? { ...inv, invitationSent: true } : inv
      )
    );
  };

  const deleteInvitation = (id) => {
    setInvitations((prev) => prev.filter((inv) => inv.id !== id));
  };

  const handleEditClick = (invitation) => {
    setEditingInvitationId(invitation.id);
    setEditedInvitation({
      ...invitation,
      invitationSent: invitation.invitationSent ? "Si" : "No",
    });
  };

  const handleChange = (field, value) => {
    setEditedInvitation((prev) => ({ ...prev, [field]: value }));
  };

  const handleSave = (id) => {
    const validStatuses = ["confirmado", "pendiente", "rechazado"];
    if (
      !editedInvitation.name.trim() ||
      isNaN(parseInt(editedInvitation.guests, 10)) ||
      parseInt(editedInvitation.guests, 10) <= 0 ||
      !editedInvitation.table.trim() ||
      !validStatuses.includes(editedInvitation.status) ||
      !editedInvitation.phone.trim() ||
      (editedInvitation.invitationSent !== "Si" &&
        editedInvitation.invitationSent !== "No")
    ) {
      return;
    }
    setInvitations((prev) =>
      prev.map((inv) =>
        inv.id === id
          ? {
              ...editedInvitation,
              guests: parseInt(editedInvitation.guests, 10),
              invitationSent:
                editedInvitation.invitationSent === "Si" ? true : false,
            }
          : inv
      )
    );
    setEditingInvitationId(null);
    setEditedInvitation({});
  };

  const stats = {
    confirmed: invitations
      .filter((inv) => inv.status === "confirmado")
      .reduce((sum, inv) => sum + inv.guests, 0),
    pending: invitations
      .filter((inv) => inv.status === "pendiente")
      .reduce((sum, inv) => sum + inv.guests, 0),
    rejected: invitations
      .filter((inv) => inv.status === "rechazado")
      .reduce((sum, inv) => sum + inv.guests, 0),
  };

  return (
    <div className="App">
      <div className="stats">
        <div className="stat confirmed">{stats.confirmed} Confirmados</div>
        <div className="stat pending">{stats.pending} Pendientes</div>
        <div className="stat total">
          {stats.confirmed + stats.pending} Total
        </div>
        <div className="stat rejected">{stats.rejected} Rechazados</div>
      </div>
      <table>
        <thead>
          <tr>
            <th>Nombre</th>
            <th>Invitados</th>
            <th>Mesa</th>
            <th>Estado</th>
            <th>Operaciones</th>
            <th>Invitación enviada</th>
            <th>Número de teléfono</th>
          </tr>
        </thead>
        <tbody>
          {invitations.map(
            ({ id, name, guests, table, status, invitationSent, phone }) => (
              <tr key={id}>
                <td>
                  {editingInvitationId === id ? (
                    <input
                      type="text"
                      value={editedInvitation.name}
                      onChange={(e) => handleChange("name", e.target.value)}
                    />
                  ) : (
                    name
                  )}
                </td>
                <td>
                  {editingInvitationId === id ? (
                    <input
                      type="number"
                      min="1"
                      value={editedInvitation.guests}
                      onChange={(e) => handleChange("guests", e.target.value)}
                    />
                  ) : (
                    guests
                  )}
                </td>
                <td>
                  {editingInvitationId === id ? (
                    <input
                      type="text"
                      value={editedInvitation.table}
                      onChange={(e) => handleChange("table", e.target.value)}
                    />
                  ) : (
                    table
                  )}
                </td>
                <td>
                  {editingInvitationId === id ? (
                    <select
                      value={editedInvitation.status}
                      onChange={(e) => handleChange("status", e.target.value)}
                    >
                      <option value="confirmado">Confirmado</option>
                      <option value="pendiente">Pendiente</option>
                      <option value="rechazado">Rechazado</option>
                    </select>
                  ) : (
                    status
                  )}
                </td>
                <td>
                  {editingInvitationId === id ? (
                    <button onClick={() => handleSave(id)}>Guardar</button>
                  ) : (
                    <button
                      onClick={() =>
                        handleEditClick({
                          id,
                          name,
                          guests,
                          table,
                          status,
                          invitationSent,
                          phone,
                        })
                      }
                    >
                      Editar
                    </button>
                  )}
                  {editingInvitationId !== id && (
                    <>
                      <button onClick={() => sendInvitation(phone)}>
                        Enviar invitación
                      </button>
                      <button onClick={() => deleteInvitation(id)}>
                        Borrar
                      </button>
                    </>
                  )}
                </td>
                <td>
                  {editingInvitationId === id ? (
                    <select
                      value={editedInvitation.invitationSent}
                      onChange={(e) =>
                        handleChange("invitationSent", e.target.value)
                      }
                    >
                      <option value="Si">Si</option>
                      <option value="No">No</option>
                    </select>
                  ) : invitationSent ? (
                    "Si"
                  ) : (
                    "No"
                  )}
                </td>
                <td>
                  {editingInvitationId === id ? (
                    <input
                      type="text"
                      value={editedInvitation.phone}
                      onChange={(e) => handleChange("phone", e.target.value)}
                    />
                  ) : (
                    phone
                  )}
                </td>
              </tr>
            )
          )}
        </tbody>
      </table>
    </div>
  );
}

export default App;
```

`App.css`
```css
.App {
  font-family: Arial, sans-serif;
  padding: 20px;
}

.stats {
  display: flex;
  justify-content: space-between;
  margin-bottom: 20px;
}

.stat {
  padding: 20px;
  border-radius: 5px;
  color: white;
  text-align: center;
}

.confirmed {
  background-color: green;
}

.pending {
  background-color: yellow;
  color: black;
}

.total {
  background-color: blue;
}

.rejected {
  background-color: red;
}

table {
  width: 100%;
  border-collapse: collapse;
}

th,
td {
  border: 1px solid #ccc;
  padding: 10px;
  text-align: left;
}

th {
  background-color: #f4f4f4;
}
```




////////////////////// RESPUESTA FINAL

