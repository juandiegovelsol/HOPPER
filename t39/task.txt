67d459010e98111897c5d9ed

67dce74e94e5bde43a8d4ee1

Trabajo para una desarrolladora de videojuegos en Santiago de Chile y me pidieron desarrollar un juego de una torreta espacial con HTML, CSS y JavaScript pero tengo algunos errores. El juego consiste en una torreta fija que dispara proyectiles hacia el espacio, desde donde pueden venir naves espaciales amigas o enemigas. Cuando se dispara una nave amiga o una enemiga llega al fondo de la pantalla se resta un punto, cuando se dispara una nave enemiga o una amiga llega al fondo de la pantalla se suma un punto.

El primer problema que tengo es que la torreta puede girar y disparar hacia la parte inferior de la pantalla lo cual quiero que sea restringido. El segundo problema es que la torreta tiene el cañón apuntando hacia la parte inferior de la pantalla, está mal posicionado porque debería apuntar en sentido contrario. El último problema que tengo es que al inciar el juego las naves desaparecen a mitad de pantalla aproximadamente y se cuentan los puntos como si hubiesen alcanzado el fondo de la pantalla, cuando pasa el tiempo las naves desaparecen cada vez mas abajo y esto es un comportamiento inesperado porque deberían desaparecer siempre en el fondo. Quiero corregir todos los errores, dame el código sin comentarios y con una explicación cortita de un párafo.

```html
<!DOCTYPE html>
<html>
  <head>
    <title>Juego Espacial</title>
    <style>
      body {
        margin: 0;
        overflow: hidden;
        background-color: #000;
      }
      #gameCanvas {
        position: relative;
        width: 600px;
        height: 800px;
        margin: 20px auto;
        background-color: #111;
        overflow: hidden;
      }
      #turret {
        position: absolute;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        width: 40px;
        height: 60px;
        display: flex;
        flex-direction: column;
        align-items: center;
        transition: transform 0.1s;
      }
      .turret-body {
        width: 100%;
        height: 40px;
        background-color: #bbb;
        border-radius: 5px 5px 0 0;
      }
      .turret-cannon {
        width: 6px;
        height: 20px;
        background-color: #ddd;
        margin-top: 5px;
        position: relative;
      }
      .ship {
        position: absolute;
        top: 0;
        width: 30px;
        height: 30px;
        transition: top 2s linear;
      }
      .friendly {
        background-color: lightgreen;
      }
      .enemy {
        background-color: lightcoral;
      }
      .ship-body {
        width: 100%;
        height: 100%;
        clip-path: polygon(50% 0%, 0% 100%, 100% 100%);
      }
      .shot {
        position: absolute;
        width: 4px;
        height: 10px;
        background-color: yellow;
      }
      #score {
        position: absolute;
        top: 10px;
        left: 10px;
        color: white;
        font-size: 20px;
      }
    </style>
  </head>
  <body>
    <div id="gameCanvas">
      <div id="turret">
        <div class="turret-body"></div>
        <div class="turret-cannon"></div>
      </div>
      <div id="score">Puntaje: 0</div>
    </div>

    <script>
      const gameCanvas = document.getElementById("gameCanvas");
      const turret = document.getElementById("turret");
      const scoreDisplay = document.getElementById("score");
      let score = 0;
      let turretRotation = 0;
      const shipWidth = 30;
      const shipHeight = 30;
      const shotSpeed = 5;
      const shipSpeed = 1;
      let ships = [];
      let shots = [];
      let gameRunning = true;

      function updateScore(points) {
        score += points;
        scoreDisplay.textContent = `Puntaje: ${score}`;
      }

      function createShip(type) {
        const ship = document.createElement("div");
        ship.classList.add("ship");
        ship.classList.add(type);
        ship.innerHTML = '<div class="ship-body"></div>';
        const startX = Math.random() * (gameCanvas.offsetWidth - shipWidth);
        ship.style.left = `${startX}px`;
        ship.dataset.type = type;
        gameCanvas.appendChild(ship);
        ships.push(ship);
        moveShip(ship);
      }

      function moveShip(ship) {
        let currentTop = -shipHeight;
        const intervalId = setInterval(() => {
          currentTop += shipSpeed;
          ship.style.top = `${currentTop}px`;
          if (currentTop > gameCanvas.offsetHeight) {
            clearInterval(intervalId);
            handleShipBottom(ship);
            ship.remove();
            ships = ships.filter((s) => s !== ship);
          }
        }, 20);
      }

      function handleShipBottom(ship) {
        if (ship.dataset.type === "friendly") {
          updateScore(1);
        } else {
          updateScore(-1);
        }
      }

      function createShot() {
        const shot = document.createElement("div");
        shot.classList.add("shot");
        const turretRect = turret.getBoundingClientRect();
        const cannonRect = turret
          .querySelector(".turret-cannon")
          .getBoundingClientRect();
        const startX =
          cannonRect.left + cannonRect.width / 2 - 2 - gameCanvas.offsetLeft;
        const startY = cannonRect.top - gameCanvas.offsetTop;
        shot.style.left = `${startX}px`;
        shot.style.top = `${startY}px`;
        const angleRad = (turretRotation * Math.PI) / 180;
        shot.dataset.angle = angleRad;
        gameCanvas.appendChild(shot);
        shots.push(shot);
        moveShot(shot);
      }

      function moveShot(shot) {
        let currentX = parseFloat(shot.style.left);
        let currentY = parseFloat(shot.style.top);
        const angle = parseFloat(shot.dataset.angle);
        currentX += shotSpeed * Math.sin(angle);
        currentY -= shotSpeed * Math.cos(angle);
        shot.style.left = `${currentX}px`;
        shot.style.top = `${currentY}px`;

        if (currentY < 0 || currentX < 0 || currentX > gameCanvas.offsetWidth) {
          shot.remove();
          shots = shots.filter((s) => s !== shot);
          return;
        }
        checkCollision(shot);
        requestAnimationFrame(() => moveShot(shot));
      }

      function checkCollision(shot) {
        const shotRect = shot.getBoundingClientRect();
        for (let i = 0; i < ships.length; i++) {
          const ship = ships[i];
          const shipRect = ship.getBoundingClientRect();
          if (
            shotRect.left < shipRect.right &&
            shotRect.right > shipRect.left &&
            shotRect.top < shipRect.bottom &&
            shotRect.bottom > shipRect.top
          ) {
            handleShotHit(ship);
            shot.remove();
            shots = shots.filter((s) => s !== shot);
            ship.remove();
            ships = ships.filter((s) => s !== ship);
            return;
          }
        }
      }

      function handleShotHit(ship) {
        if (ship.dataset.type === "enemy") {
          updateScore(1);
        } else {
          updateScore(-1);
        }
      }

      document.addEventListener("keydown", (event) => {
        if (event.key === "ArrowLeft") {
          turretRotation -= 10;
        } else if (event.key === "ArrowRight") {
          turretRotation += 10;
        } else if (event.key === " ") {
          createShot();
        }
        turretRotation = Math.max(-180, Math.min(180, turretRotation));
        turret.style.transform = `translateX(-50%) rotate(${turretRotation}deg)`;
      });

      function gameLoop() {
        if (!gameRunning) return;
        if (Math.random() < 0.01) {
          const shipType = Math.random() < 0.5 ? "friendly" : "enemy";
          createShip(shipType);
        }
        requestAnimationFrame(gameLoop);
      }

      gameLoop();
    </script>
  </body>
</html>
```