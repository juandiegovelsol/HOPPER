6807b772f3e6b0ef270d9df0

67d3d12ffbc714b18e991885

Implementa un sistema en Node que me permita automatizar el seguimiento de tareas asignadas a partir de un JSON,
cada tarea debe tener una descripcion, una persona asignada, un estado verdadero o falso para saber si se entrego.
El programa debe validar que la información no esté vacía y que los datos sean del tipo correcto, si no debe emitir
una alerta e ignorar el procesamiento de esa tarea. Quiero que el programa me permita obtener un resumen de todas las tareas,
que me diga cuantas se han entregado y cuantas estan pendientes. Tambien quiero que me diga que personas tienen tareas pendientes y
cuantas tareas pendientes tienen. Dame el codigo completo sin comentarios y un archivo JSON de prueba

Estoy implementando un sistema de seguimiento de tareas que recibe como entrada un archivo JSON, procesa la información validando que los campos no son vacíos y son del tipo correcto, y después determina la cantidad de tareas entregadas/pendientes. También calcula y muestra la cantidad de tareas pendientes que tiene cada persona.

```javascript
const fs = require("fs");

class TaskTracker {
  constructor() {
    this.tasks = [];
  }

  loadTasks(filePath) {
    try {
      const data = fs.readFileSync(filePath, "utf8");
      const tasks = JSON.parse(data);

      if (!Array.isArray(tasks)) {
        throw new Error("El archivo JSON debe contener un array de tareas");
      }

      this.tasks = tasks.filter((task) => this.validateTask(task));
      return true;
    } catch (error) {
      console.error(`Error al cargar las tareas: ${error.message}`);
      return false;
    }
  }

  validateTask(task) {
    if (!task) {
      console.error("Alerta: Tarea es null o undefined");
      return false;
    }

    if (typeof task !== "object") {
      console.error("Alerta: Tarea no es un objeto");
      return false;
    }

    if (!task.descripcion || typeof task.descripcion !== "string") {
      console.error("Alerta: Descripción inválida o vacía");
      return false;
    }

    if (!task.persona || typeof task.persona !== "string") {
      console.error("Alerta: Persona inválida o vacía");
      return false;
    }

    if (typeof task.entregada !== "boolean") {
      console.error("Alerta: Estado de entrega inválido");
      return false;
    }

    return true;
  }

  getResumen() {
    const total = this.tasks.length;
    const entregadas = this.tasks.filter((task) => task.entregada).length;
    const pendientes = total - entregadas;

    return {
      total,
      entregadas,
      pendientes,
    };
  }

  getPersonasConTareasPendientes() {
    const personas = {};

    this.tasks.forEach((task) => {
      if (!task.entregada) {
        if (!personas[task.persona]) {
          personas[task.persona] = 0;
        }
        personas[task.persona]++;
      }
    });

    return personas;
  }

  imprimirResumen() {
    const resumen = this.getResumen();
    console.log("\n--- RESUMEN DE TAREAS ---");
    console.log(`Total de tareas: ${resumen.total}`);
    console.log(`Tareas entregadas: ${resumen.entregadas}`);
    console.log(`Tareas pendientes: ${resumen.pendientes}`);

    console.log("\n--- PERSONAS CON TAREAS PENDIENTES ---");
    const personasPendientes = this.getPersonasConTareasPendientes();

    if (Object.keys(personasPendientes).length === 0) {
      console.log("No hay tareas pendientes");
    } else {
      for (const persona in personasPendientes) {
        console.log(
          `${persona}: ${personasPendientes[persona]} tarea(s) pendiente(s)`
        );
      }
    }
  }
}

const tracker = new TaskTracker();
tracker.loadTasks("./tareas.json");
tracker.imprimirResumen();

module.exports = TaskTracker;
```

Quiero asegurarme que el programa funciona como lo requiero, para ello dame la salida en consola de cada una de las siguientes entradas, junto con una explicación de por qué se produce cada salida.

Entrada 1
`tareas.json`
```json
[
  {
    "descripcion": "Crear documentación del proyecto",
    "persona": "Ana García",
    "entregada": true
  },
  {
    "descripcion": "Implementar API de autenticación",
    "persona": "Carlos Rodríguez",
    "entregada": false
  },
  {
    "descripcion": "Diseñar interfaz de usuario",
    "persona": "Laura Martínez",
    "entregada": false
  },
  {
    "descripcion": "Realizar pruebas de integración",
    "persona": "Carlos Rodríguez",
    "entregada": false
  }
]
```

Entrada 2
`tareas.json`
```json
[
  {
    "descripcion": "Optimizar consultas de base de datos",
    "persona": "Ana García",
    "entregada": false
  },
  {
    "descripcion": "Corregir errores reportados",
    "persona": "Laura Martínez",
    "entregada": true
  },
  {
    "descripcion": "Actualizar dependencias",
    "persona": "Carlos Rodríguez",
    "entregada": true
  },
  {
    "descripcion": "",
    "persona": "Juan Pérez",
    "entregada": false
  }
]
```

Entrada 3
`tareas.json`
```json
[
  {
    "descripcion": "",
    "persona": "Juan Pérez",
    "entregada": false
  },
  {
    "descripcion": "Asignar prioridades",
    "persona": "",
    "entregada": true
  },
  {
    "descripcion": "Registrar casos de usuario",
    "persona": "Elena López",
    "entregada": "No"
  }
]
```
